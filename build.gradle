def maryttsVersion = '5.1.2'

allprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'

    group 'de.dfki.mary'
    version '0.5.3-SNAPSHOT'

    repositories {
        jcenter()
        maven {
            url 'https://oss.jfrog.org/artifactory/libs-release'
        }
    }

    dependencies {
        compile localGroovy()
        compile gradleApi()
        compile group: 'de.dfki.mary', name: 'marytts-runtime', version: maryttsVersion
        ['de', 'en', 'fr', 'it', 'ru', 'sv', 'te', 'tr'].each { locale ->
            runtime group: 'de.dfki.mary', name: "marytts-lang-$locale", version: maryttsVersion
        }
        testCompile gradleTestKit()
        testCompile group: 'org.testng', name: 'testng', version: '6.9.4'
    }

    test {
        useTestNG()

        testLogging {
            exceptionFormat = 'full'
        }

        // test project under build, but nuke it first to be sure it's clean
        def testProjectDir = "$buildDir/testProject"
        systemProperty 'testProjectDir', testProjectDir
        doFirst {
            delete testProjectDir
        }
    }

    // Write the plugin's classpath to a file to share with the tests
    task createClasspathManifest {
        def outputDir = file("$buildDir/$name")

        inputs.files sourceSets.main.runtimeClasspath
        outputs.dir outputDir

        doLast {
            outputDir.mkdirs()
            file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
        }
    }

    // Add the classpath file to the test runtime classpath
    dependencies {
        testRuntime files(createClasspathManifest)
    }

    task copyTestRuntimeDependencies(type: Copy) {
        from configurations.testRuntime
        into "$buildDir/testKitGradleHome"
        test.dependsOn it
    }
}

repositories {
    maven {
        url 'https://oss.jfrog.org/artifactory/repo'
    }
}

dependencies {
    compile project('data-plugin')
    compile 'commons-codec:commons-codec:1.9'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}
